{"mappings":"IGkDI,EAAU,EAAQ,EAAO,EACzB,EAAO,EAAO,EAAY,EAAO,EAAkB,EACnD,EACA,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,Q,S,C,C,C,E,E,E,O,C,W,I,E,A,G,E,G,E,E,O,C,U,I,E,A,G,E,GFnDJ,IAcA,EACA,EAfI,EAAU,CAAC,EAcf,EAbA,SAAkB,CAAK,EAErB,IAAK,IADD,EAAO,OAAO,IAAA,CAAK,GACd,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAC/B,CAAO,CAAC,CAAI,CAAC,EAAE,CAAC,CAAG,CAAK,CAAC,CAAI,CAAC,EAAE,CAAC,AAErC,EASA,EARA,SAAiB,CAAE,EACjB,IAAI,EAAW,CAAO,CAAC,EAAG,CAC1B,GAAI,AAAY,MAAZ,EACF,MAAM,AAAI,MAAM,oCAAsC,GAExD,OAAO,CACT,C,GCfA,AAAA,EAAA,SAAA,QAAA,CAA8C,KAAK,KAAA,CAAM,yN,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEEzD,MAAM,EAAO,4B,I,E,C,E,E,C,EEAb,EAAiB,SAAU,CAAS,CAAE,CAAM,CAAE,CAAK,EACjD,GAAI,IAAW,KAAK,QAAA,CAAS,MAAA,CAG3B,OAAO,EAGP,IAAI,EAAS,EAAQ,UAAY,KAAK,SAAA,CAAU,GAAa,IAAM,iBAAmB,KAAK,SAAA,CAAU,GAAa,KAClH,OAAO,IAAI,eAAA,CAAgB,IAAI,KAAK,CAAC,EAAO,CAAE,CAC5C,KAAM,wBACR,GAEJ,EDbA,IAAI,EAAA,IAAA,IAA0B,AAAA,EAAA,SAAA,OAAA,CAA6C,SAA3E,YAAA,GAAA,EACA,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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-5c91d9c893243f89.js","example/edgeProjection.js","src/worker/ProjectionGeneratorWorker.js","node_modules/@parcel/runtime-js/lib/runtime-7569578f85288298.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire6c98\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire6c98\"] = parcelRequire;\n}\nparcelRequire.register(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\n$parcel$export(module.exports, \"resolve\", () => $18c11f3350a906ea$export$f7ad0328861e2f03, (v) => $18c11f3350a906ea$export$f7ad0328861e2f03 = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = {};\nfunction $18c11f3350a906ea$var$register(pairs) {\n    var keys = Object.keys(pairs);\n    for(var i = 0; i < keys.length; i++)$18c11f3350a906ea$var$mapping[keys[i]] = pairs[keys[i]];\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping[id];\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return resolved;\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $e345fbc6b0a7906f$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(JSON.parse('{\"gEVFf\":\"edgeProjection.59721e0c.js\",\"8zbCD\":\"projectionAsync.worker.28971622.js\",\"dJZsV\":\"projectionAsync.worker.d112c604.js\",\"6k19S\":\"silhouetteProjection.4211e9ae.js\",\"8wv4S\":\"planarIntersection.e9e5f1e5.js\"}'));\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $7lx9d = parcelRequire(\"7lx9d\");\n\nvar $7ePFa = parcelRequire(\"7ePFa\");\n\nvar $kp7Te = parcelRequire(\"kp7Te\");\n\nvar $4CEV9 = parcelRequire(\"4CEV9\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $5c260663d40074f0$var$NAME = \"ProjectionGeneratorWorker\";\nvar $deac5b03489e8ef8$exports = {};\nvar $56b621a6dd25b2cb$exports = {};\n\"use strict\";\n$56b621a6dd25b2cb$exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? \"import \" + JSON.stringify(workerUrl) + \";\" : \"importScripts(\" + JSON.stringify(workerUrl) + \");\";\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: \"application/javascript\"\n        }));\n    }\n};\n\n\n\nlet $deac5b03489e8ef8$var$url = new URL((parcelRequire(\"27Lyk\")).resolve(\"8zbCD\"), import.meta.url);\n$deac5b03489e8ef8$exports = $56b621a6dd25b2cb$exports($deac5b03489e8ef8$var$url.toString(), $deac5b03489e8ef8$var$url.origin, true);\n\n\nclass $5c260663d40074f0$export$58847e466a6b9214 {\n    constructor(){\n        this.running = false;\n        this.worker = new Worker($deac5b03489e8ef8$exports);\n        this.worker.onerror = (e)=>{\n            if (e.message) throw new Error(`${$5c260663d40074f0$var$NAME}: Could not create Web Worker with error \"${e.message}\"`);\n            else throw new Error(`${$5c260663d40074f0$var$NAME}: Could not create Web Worker.`);\n        };\n    }\n    generate(geometry, options = {}) {\n        if (this.running) throw new Error(`${$5c260663d40074f0$var$NAME}: Already running job.`);\n        if (this.worker === null) throw new Error(`${$5c260663d40074f0$var$NAME}: Worker has been disposed.`);\n        const { worker: worker } = this;\n        this.running = true;\n        return new Promise((resolve, reject)=>{\n            worker.onerror = (e)=>{\n                reject(new Error(`${$5c260663d40074f0$var$NAME}: ${e.message}`));\n                this.running = false;\n            };\n            worker.onmessage = (e)=>{\n                this.running = false;\n                const { data: data } = e;\n                if (data.error) {\n                    reject(new Error(data.error));\n                    worker.onmessage = null;\n                } else if (data.result) {\n                    const geometry = new (0, $ilwiq.BufferGeometry)();\n                    geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(data.result, 3, false));\n                    resolve(geometry);\n                    worker.onmessage = null;\n                } else if (options.onProgress) options.onProgress(data.progress);\n            };\n            const index = geometry.index ? geometry.index.array.slice() : null;\n            const position = geometry.attributes.position.array.slice();\n            const transfer = [\n                position.buffer\n            ];\n            if (index) transfer.push(index.buffer);\n            worker.postMessage({\n                index: index,\n                position: position,\n                options: {\n                    ...options,\n                    onProgress: null,\n                    includedProgressCallback: Boolean(options.onProgress)\n                }\n            }, transfer);\n        });\n    }\n    dispose() {\n        this.worker.terminate();\n        this.worker = null;\n    }\n}\n\n\n\nvar $fNPnQ = parcelRequire(\"fNPnQ\");\nconst $c9fdec40e3bbb10a$var$params = {\n    displayModel: \"color\",\n    displayEdges: false,\n    displayProjection: true,\n    sortEdges: true,\n    includeIntersectionEdges: true,\n    useWorker: false,\n    rotate: ()=>{\n        $c9fdec40e3bbb10a$var$group.quaternion.random();\n        $c9fdec40e3bbb10a$var$group.position.set(0, 0, 0);\n        $c9fdec40e3bbb10a$var$group.updateMatrixWorld(true);\n        const box = new (0, $ilwiq.Box3)();\n        box.setFromObject($c9fdec40e3bbb10a$var$model, true);\n        box.getCenter($c9fdec40e3bbb10a$var$group.position).multiplyScalar(-1);\n        $c9fdec40e3bbb10a$var$group.position.y = Math.max(0, -box.min.y) + 1;\n    },\n    regenerate: ()=>{\n        $c9fdec40e3bbb10a$var$task = $c9fdec40e3bbb10a$var$updateEdges();\n    }\n};\nconst $c9fdec40e3bbb10a$var$ANGLE_THRESHOLD = 50;\nlet $c9fdec40e3bbb10a$var$renderer, $c9fdec40e3bbb10a$var$camera, $c9fdec40e3bbb10a$var$scene, $c9fdec40e3bbb10a$var$gui, $c9fdec40e3bbb10a$var$controls;\nlet $c9fdec40e3bbb10a$var$lines, $c9fdec40e3bbb10a$var$model, $c9fdec40e3bbb10a$var$projection, $c9fdec40e3bbb10a$var$group, $c9fdec40e3bbb10a$var$shadedWhiteModel, $c9fdec40e3bbb10a$var$whiteModel;\nlet $c9fdec40e3bbb10a$var$outputContainer;\nlet $c9fdec40e3bbb10a$var$worker;\nlet $c9fdec40e3bbb10a$var$task = null;\n$c9fdec40e3bbb10a$var$init();\nasync function $c9fdec40e3bbb10a$var$init() {\n    $c9fdec40e3bbb10a$var$outputContainer = document.getElementById(\"output\");\n    const bgColor = 0xeeeeee;\n    // renderer setup\n    $c9fdec40e3bbb10a$var$renderer = new (0, $ilwiq.WebGLRenderer)({\n        antialias: true\n    });\n    $c9fdec40e3bbb10a$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $c9fdec40e3bbb10a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $c9fdec40e3bbb10a$var$renderer.setClearColor(bgColor, 1);\n    document.body.appendChild($c9fdec40e3bbb10a$var$renderer.domElement);\n    // scene setup\n    $c9fdec40e3bbb10a$var$scene = new (0, $ilwiq.Scene)();\n    // lights\n    const light = new (0, $ilwiq.DirectionalLight)(0xffffff, 3.5);\n    light.position.set(1, 2, 3);\n    $c9fdec40e3bbb10a$var$scene.add(light);\n    const ambientLight = new (0, $ilwiq.AmbientLight)(0xb0bec5, 0.5);\n    $c9fdec40e3bbb10a$var$scene.add(ambientLight);\n    // load model\n    $c9fdec40e3bbb10a$var$group = new (0, $ilwiq.Group)();\n    $c9fdec40e3bbb10a$var$scene.add($c9fdec40e3bbb10a$var$group);\n    const gltf = await new (0, $7lx9d.GLTFLoader)().setMeshoptDecoder((0, $kp7Te.MeshoptDecoder)).loadAsync(\"https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/nasa-m2020/Perseverance.glb\");\n    $c9fdec40e3bbb10a$var$model = gltf.scene;\n    const whiteMaterial = new (0, $ilwiq.MeshStandardMaterial)({\n        polygonOffset: true,\n        polygonOffsetFactor: 1,\n        polygonOffsetUnits: 1\n    });\n    $c9fdec40e3bbb10a$var$shadedWhiteModel = $c9fdec40e3bbb10a$var$model.clone();\n    $c9fdec40e3bbb10a$var$shadedWhiteModel.traverse((c)=>{\n        if (c.material) c.material = whiteMaterial;\n    });\n    const whiteBasicMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n        polygonOffset: true,\n        polygonOffsetFactor: 1,\n        polygonOffsetUnits: 1\n    });\n    $c9fdec40e3bbb10a$var$whiteModel = $c9fdec40e3bbb10a$var$model.clone();\n    $c9fdec40e3bbb10a$var$whiteModel.traverse((c)=>{\n        if (c.material) c.material = whiteBasicMaterial;\n    });\n    $c9fdec40e3bbb10a$var$group.updateMatrixWorld(true);\n    // center model\n    const box = new (0, $ilwiq.Box3)();\n    box.setFromObject($c9fdec40e3bbb10a$var$model, true);\n    box.getCenter($c9fdec40e3bbb10a$var$group.position).multiplyScalar(-1);\n    $c9fdec40e3bbb10a$var$group.position.y = Math.max(0, -box.min.y) + 1;\n    $c9fdec40e3bbb10a$var$group.add($c9fdec40e3bbb10a$var$model, $c9fdec40e3bbb10a$var$shadedWhiteModel, $c9fdec40e3bbb10a$var$whiteModel);\n    // generate geometry line segments\n    $c9fdec40e3bbb10a$var$lines = new (0, $ilwiq.Group)();\n    $c9fdec40e3bbb10a$var$model.traverse((c)=>{\n        if (c.geometry) {\n            const edges = (0, $fNPnQ.generateEdges)(c.geometry, undefined, $c9fdec40e3bbb10a$var$ANGLE_THRESHOLD);\n            const points = edges.flatMap((line)=>[\n                    line.start,\n                    line.end\n                ]);\n            const geom = new (0, $ilwiq.BufferGeometry)();\n            geom.setFromPoints(points);\n            const geomLines = new (0, $ilwiq.LineSegments)(geom, new (0, $ilwiq.LineBasicMaterial)({\n                color: 0x030303\n            }));\n            geomLines.position.copy(c.position);\n            geomLines.quaternion.copy(c.quaternion);\n            geomLines.scale.copy(c.scale);\n            $c9fdec40e3bbb10a$var$lines.add(geomLines);\n        }\n    });\n    $c9fdec40e3bbb10a$var$group.add($c9fdec40e3bbb10a$var$lines);\n    // create projection display mesh\n    $c9fdec40e3bbb10a$var$projection = new (0, $ilwiq.LineSegments)(new (0, $ilwiq.BufferGeometry)(), new (0, $ilwiq.LineBasicMaterial)({\n        color: 0x030303\n    }));\n    $c9fdec40e3bbb10a$var$scene.add($c9fdec40e3bbb10a$var$projection);\n    // camera setup\n    $c9fdec40e3bbb10a$var$camera = new (0, $ilwiq.PerspectiveCamera)(75, window.innerWidth / window.innerHeight, 0.01, 50);\n    $c9fdec40e3bbb10a$var$camera.position.setScalar(3.5);\n    $c9fdec40e3bbb10a$var$camera.updateProjectionMatrix();\n    // controls\n    $c9fdec40e3bbb10a$var$controls = new (0, $5Rd1x.OrbitControls)($c9fdec40e3bbb10a$var$camera, $c9fdec40e3bbb10a$var$renderer.domElement);\n    $c9fdec40e3bbb10a$var$gui = new (0, $jiuw3.GUI)();\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"displayModel\", [\n        \"none\",\n        \"color\",\n        \"shaded white\"\n    ]);\n    // gui.add( params, 'displayEdges' );\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"displayProjection\");\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"sortEdges\");\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"includeIntersectionEdges\");\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"useWorker\");\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"rotate\");\n    $c9fdec40e3bbb10a$var$gui.add($c9fdec40e3bbb10a$var$params, \"regenerate\");\n    $c9fdec40e3bbb10a$var$worker = new (0, $5c260663d40074f0$export$58847e466a6b9214)();\n    $c9fdec40e3bbb10a$var$task = $c9fdec40e3bbb10a$var$updateEdges();\n    $c9fdec40e3bbb10a$var$render();\n    window.addEventListener(\"resize\", function() {\n        $c9fdec40e3bbb10a$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $c9fdec40e3bbb10a$var$camera.updateProjectionMatrix();\n        $c9fdec40e3bbb10a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n}\nfunction* $c9fdec40e3bbb10a$var$updateEdges(runTime = 30) {\n    $c9fdec40e3bbb10a$var$outputContainer.innerText = \"processing: --\";\n    // transform and merge geometries to project into a single model\n    let timeStart = window.performance.now();\n    const geometries = [];\n    $c9fdec40e3bbb10a$var$model.updateWorldMatrix(true, true);\n    $c9fdec40e3bbb10a$var$model.traverse((c)=>{\n        if (c.geometry) {\n            const clone = c.geometry.clone();\n            clone.applyMatrix4(c.matrixWorld);\n            for(const key in clone.attributes)if (key !== \"position\") clone.deleteAttribute(key);\n            geometries.push(clone);\n        }\n    });\n    const mergedGeometry = (0, $7ePFa.mergeGeometries)(geometries, false);\n    const mergeTime = window.performance.now() - timeStart;\n    yield;\n    if ($c9fdec40e3bbb10a$var$params.includeIntersectionEdges) {\n        $c9fdec40e3bbb10a$var$outputContainer.innerText = \"processing: finding edge intersections...\";\n        $c9fdec40e3bbb10a$var$projection.geometry.dispose();\n        $c9fdec40e3bbb10a$var$projection.geometry = new (0, $ilwiq.BufferGeometry)();\n    }\n    // generate the candidate edges\n    timeStart = window.performance.now();\n    let geometry = null;\n    if (!$c9fdec40e3bbb10a$var$params.useWorker) {\n        const generator = new (0, $4CEV9.ProjectionGenerator)();\n        generator.sortEdges = $c9fdec40e3bbb10a$var$params.sortEdges;\n        generator.iterationTime = runTime;\n        generator.angleThreshold = $c9fdec40e3bbb10a$var$ANGLE_THRESHOLD;\n        generator.includeIntersectionEdges = $c9fdec40e3bbb10a$var$params.includeIntersectionEdges;\n        const task = generator.generate(mergedGeometry, {\n            onProgress: (p, data)=>{\n                $c9fdec40e3bbb10a$var$outputContainer.innerText = `processing: ${parseFloat((p * 100).toFixed(2))}%`;\n                if ($c9fdec40e3bbb10a$var$params.displayProjection) {\n                    $c9fdec40e3bbb10a$var$projection.geometry.dispose();\n                    $c9fdec40e3bbb10a$var$projection.geometry = data.getLineGeometry();\n                }\n            }\n        });\n        let result = task.next();\n        while(!result.done){\n            result = task.next();\n            yield;\n        }\n        geometry = result.value;\n    } else {\n        $c9fdec40e3bbb10a$var$worker.generate(mergedGeometry, {\n            sortEdges: $c9fdec40e3bbb10a$var$params.sortEdges,\n            includeIntersectionEdges: $c9fdec40e3bbb10a$var$params.includeIntersectionEdges,\n            onProgress: (p)=>{\n                $c9fdec40e3bbb10a$var$outputContainer.innerText = `processing: ${parseFloat((p * 100).toFixed(2))}%`;\n            }\n        }).then((result)=>{\n            geometry = result;\n        });\n        while(geometry === null)yield;\n    }\n    const trimTime = window.performance.now() - timeStart;\n    $c9fdec40e3bbb10a$var$projection.geometry.dispose();\n    $c9fdec40e3bbb10a$var$projection.geometry = geometry;\n    $c9fdec40e3bbb10a$var$outputContainer.innerText = `merge geometry  : ${mergeTime.toFixed(2)}ms\\n` + `edge trimming   : ${trimTime.toFixed(2)}ms`;\n}\nfunction $c9fdec40e3bbb10a$var$render() {\n    requestAnimationFrame($c9fdec40e3bbb10a$var$render);\n    if ($c9fdec40e3bbb10a$var$task) {\n        const res = $c9fdec40e3bbb10a$var$task.next();\n        if (res.done) $c9fdec40e3bbb10a$var$task = null;\n    }\n    $c9fdec40e3bbb10a$var$model.visible = $c9fdec40e3bbb10a$var$params.displayModel === \"color\";\n    $c9fdec40e3bbb10a$var$shadedWhiteModel.visible = $c9fdec40e3bbb10a$var$params.displayModel === \"shaded white\";\n    $c9fdec40e3bbb10a$var$whiteModel.visible = $c9fdec40e3bbb10a$var$params.displayModel === \"white\";\n    $c9fdec40e3bbb10a$var$lines.visible = $c9fdec40e3bbb10a$var$params.displayEdges;\n    $c9fdec40e3bbb10a$var$projection.visible = $c9fdec40e3bbb10a$var$params.displayProjection;\n    $c9fdec40e3bbb10a$var$renderer.render($c9fdec40e3bbb10a$var$scene, $c9fdec40e3bbb10a$var$camera);\n}\n\n\n//# sourceMappingURL=edgeProjection.59721e0c.js.map\n","\"use strict\";\n\nvar mapping = {};\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping[id];\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return resolved;\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"gEVFf\\\":\\\"edgeProjection.59721e0c.js\\\",\\\"8zbCD\\\":\\\"projectionAsync.worker.28971622.js\\\",\\\"dJZsV\\\":\\\"projectionAsync.worker.d112c604.js\\\",\\\"6k19S\\\":\\\"silhouetteProjection.4211e9ae.js\\\",\\\"8wv4S\\\":\\\"planarIntersection.e9e5f1e5.js\\\"}\"));","import {\n\tBox3,\n\tWebGLRenderer,\n\tScene,\n\tDirectionalLight,\n\tAmbientLight,\n\tGroup,\n\tMeshStandardMaterial,\n\tMeshBasicMaterial,\n\tBufferGeometry,\n\tLineSegments,\n\tLineBasicMaterial,\n\tPerspectiveCamera,\n} from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { mergeGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { ProjectionGenerator } from '..';\nimport { ProjectionGeneratorWorker } from '../src/worker/ProjectionGeneratorWorker.js';\nimport { generateEdges } from '../src/utils/generateEdges.js';\n\nconst params = {\n\tdisplayModel: 'color',\n\tdisplayEdges: false,\n\tdisplayProjection: true,\n\tsortEdges: true,\n\tincludeIntersectionEdges: true,\n\tuseWorker: false,\n\trotate: () => {\n\n\t\tgroup.quaternion.random();\n\t\tgroup.position.set( 0, 0, 0 );\n\t\tgroup.updateMatrixWorld( true );\n\n\t\tconst box = new Box3();\n\t\tbox.setFromObject( model, true );\n\t\tbox.getCenter( group.position ).multiplyScalar( - 1 );\n\t\tgroup.position.y = Math.max( 0, - box.min.y ) + 1;\n\n\t},\n\tregenerate: () => {\n\n\t\ttask = updateEdges();\n\n\t},\n};\n\nconst ANGLE_THRESHOLD = 50;\nlet renderer, camera, scene, gui, controls;\nlet lines, model, projection, group, shadedWhiteModel, whiteModel;\nlet outputContainer;\nlet worker;\nlet task = null;\n\ninit();\n\nasync function init() {\n\n\toutputContainer = document.getElementById( 'output' );\n\n\tconst bgColor = 0xeeeeee;\n\n\t// renderer setup\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new Scene();\n\n\t// lights\n\tconst light = new DirectionalLight( 0xffffff, 3.5 );\n\tlight.position.set( 1, 2, 3 );\n\tscene.add( light );\n\n\tconst ambientLight = new AmbientLight( 0xb0bec5, 0.5 );\n\tscene.add( ambientLight );\n\n\t// load model\n\tgroup = new Group();\n\tscene.add( group );\n\n\tconst gltf = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/nasa-m2020/Perseverance.glb' );\n\tmodel = gltf.scene;\n\n\tconst whiteMaterial = new MeshStandardMaterial( {\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetFactor: 1,\n\t\tpolygonOffsetUnits: 1,\n\t} );\n\tshadedWhiteModel = model.clone();\n\tshadedWhiteModel.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tc.material = whiteMaterial;\n\n\t\t}\n\n\t} );\n\n\tconst whiteBasicMaterial = new MeshBasicMaterial( {\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetFactor: 1,\n\t\tpolygonOffsetUnits: 1,\n\t} );\n\twhiteModel = model.clone();\n\twhiteModel.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tc.material = whiteBasicMaterial;\n\n\t\t}\n\n\t} );\n\n\tgroup.updateMatrixWorld( true );\n\n\t// center model\n\tconst box = new Box3();\n\tbox.setFromObject( model, true );\n\tbox.getCenter( group.position ).multiplyScalar( - 1 );\n\tgroup.position.y = Math.max( 0, - box.min.y ) + 1;\n\tgroup.add( model, shadedWhiteModel, whiteModel );\n\n\t// generate geometry line segments\n\tlines = new Group();\n\tmodel.traverse( c => {\n\n\t\tif ( c.geometry ) {\n\n\t\t\tconst edges = generateEdges( c.geometry, undefined, ANGLE_THRESHOLD );\n\t\t\tconst points = edges.flatMap( line => [ line.start, line.end ] );\n\t\t\tconst geom = new BufferGeometry();\n\t\t\tgeom.setFromPoints( points );\n\n\t\t\tconst geomLines = new LineSegments( geom, new LineBasicMaterial( { color: 0x030303 } ) );\n\t\t\tgeomLines.position.copy( c.position );\n\t\t\tgeomLines.quaternion.copy( c.quaternion );\n\t\t\tgeomLines.scale.copy( c.scale );\n\t\t\tlines.add( geomLines );\n\n\t\t}\n\n\t} );\n\tgroup.add( lines );\n\n\t// create projection display mesh\n\tprojection = new LineSegments( new BufferGeometry(), new LineBasicMaterial( { color: 0x030303 } ) );\n\tscene.add( projection );\n\n\t// camera setup\n\tcamera = new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.01, 50 );\n\tcamera.position.setScalar( 3.5 );\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\tgui = new GUI();\n\tgui.add( params, 'displayModel', [\n\t\t'none',\n\t\t'color',\n\t\t'shaded white',\n\t\t// 'white',\n\t] );\n\t// gui.add( params, 'displayEdges' );\n\tgui.add( params, 'displayProjection' );\n\tgui.add( params, 'sortEdges' );\n\tgui.add( params, 'includeIntersectionEdges' );\n\tgui.add( params, 'useWorker' );\n\tgui.add( params, 'rotate' );\n\tgui.add( params, 'regenerate' );\n\n\tworker = new ProjectionGeneratorWorker();\n\n\ttask = updateEdges();\n\n\trender();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\nfunction* updateEdges( runTime = 30 ) {\n\n\toutputContainer.innerText = 'processing: --';\n\n\t// transform and merge geometries to project into a single model\n\tlet timeStart = window.performance.now();\n\tconst geometries = [];\n\tmodel.updateWorldMatrix( true, true );\n\tmodel.traverse( c => {\n\n\t\tif ( c.geometry ) {\n\n\t\t\tconst clone = c.geometry.clone();\n\t\t\tclone.applyMatrix4( c.matrixWorld );\n\t\t\tfor ( const key in clone.attributes ) {\n\n\t\t\t\tif ( key !== 'position' ) {\n\n\t\t\t\t\tclone.deleteAttribute( key );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometries.push( clone );\n\n\t\t}\n\n\t} );\n\tconst mergedGeometry = mergeGeometries( geometries, false );\n\tconst mergeTime = window.performance.now() - timeStart;\n\n\tyield;\n\n\tif ( params.includeIntersectionEdges ) {\n\n\t\toutputContainer.innerText = 'processing: finding edge intersections...';\n\t\tprojection.geometry.dispose();\n\t\tprojection.geometry = new BufferGeometry();\n\n\t}\n\n\t// generate the candidate edges\n\ttimeStart = window.performance.now();\n\n\tlet geometry = null;\n\tif ( ! params.useWorker ) {\n\n\t\tconst generator = new ProjectionGenerator();\n\t\tgenerator.sortEdges = params.sortEdges;\n\t\tgenerator.iterationTime = runTime;\n\t\tgenerator.angleThreshold = ANGLE_THRESHOLD;\n\t\tgenerator.includeIntersectionEdges = params.includeIntersectionEdges;\n\n\t\tconst task = generator.generate( mergedGeometry, {\n\n\t\t\tonProgress: ( p, data ) => {\n\n\t\t\t\toutputContainer.innerText = `processing: ${ parseFloat( ( p * 100 ).toFixed( 2 ) ) }%`;\n\t\t\t\tif ( params.displayProjection ) {\n\n\t\t\t\t\tprojection.geometry.dispose();\n\t\t\t\t\tprojection.geometry = data.getLineGeometry();\n\n\t\t\t\t}\n\n\n\t\t\t},\n\n\t\t} );\n\n\t\tlet result = task.next();\n\t\twhile ( ! result.done ) {\n\n\t\t\tresult = task.next();\n\t\t\tyield;\n\n\t\t}\n\n\t\tgeometry = result.value;\n\n\t} else {\n\n\t\tworker\n\t\t\t.generate( mergedGeometry, {\n\t\t\t\tsortEdges: params.sortEdges,\n\t\t\t\tincludeIntersectionEdges: params.includeIntersectionEdges,\n\t\t\t\tonProgress: p => {\n\n\t\t\t\t\toutputContainer.innerText = `processing: ${ parseFloat( ( p * 100 ).toFixed( 2 ) ) }%`;\n\n\t\t\t\t},\n\t\t\t} )\n\t\t\t.then( result => {\n\n\t\t\t\tgeometry = result;\n\n\t\t\t} );\n\n\t\twhile ( geometry === null ) {\n\n\t\t\tyield;\n\n\t\t}\n\n\t}\n\n\tconst trimTime = window.performance.now() - timeStart;\n\n\tprojection.geometry.dispose();\n\tprojection.geometry = geometry;\n\toutputContainer.innerText =\n\t\t`merge geometry  : ${ mergeTime.toFixed( 2 ) }ms\\n` +\n\t\t`edge trimming   : ${ trimTime.toFixed( 2 ) }ms`;\n\n}\n\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tif ( task ) {\n\n\t\tconst res = task.next();\n\t\tif ( res.done ) {\n\n\t\t\ttask = null;\n\n\t\t}\n\n\t}\n\n\tmodel.visible = params.displayModel === 'color';\n\tshadedWhiteModel.visible = params.displayModel === 'shaded white';\n\twhiteModel.visible = params.displayModel === 'white';\n\tlines.visible = params.displayEdges;\n\tprojection.visible = params.displayProjection;\n\n\trenderer.render( scene, camera );\n\n}\n","import { BufferAttribute, BufferGeometry } from 'three';\n\nconst NAME = 'ProjectionGeneratorWorker';\nexport class ProjectionGeneratorWorker {\n\n\tconstructor() {\n\n\t\tthis.running = false;\n\t\tthis.worker = new Worker( new URL( './projectionAsync.worker.js', import.meta.url ), { type: 'module' } );\n\t\tthis.worker.onerror = e => {\n\n\t\t\tif ( e.message ) {\n\n\t\t\t\tthrow new Error( `${ NAME }: Could not create Web Worker with error \"${ e.message }\"` );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( `${ NAME }: Could not create Web Worker.` );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tgenerate( geometry, options = {} ) {\n\n\t\tif ( this.running ) {\n\n\t\t\tthrow new Error( `${ NAME }: Already running job.` );\n\n\t\t}\n\n\t\tif ( this.worker === null ) {\n\n\t\t\tthrow new Error( `${ NAME }: Worker has been disposed.` );\n\n\t\t}\n\n\t\tconst { worker } = this;\n\t\tthis.running = true;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tworker.onerror = e => {\n\n\t\t\t\treject( new Error( `${ NAME }: ${ e.message }` ) );\n\t\t\t\tthis.running = false;\n\n\t\t\t};\n\n\t\t\tworker.onmessage = e => {\n\n\t\t\t\tthis.running = false;\n\t\t\t\tconst { data } = e;\n\n\t\t\t\tif ( data.error ) {\n\n\t\t\t\t\treject( new Error( data.error ) );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( data.result ) {\n\n\t\t\t\t\tconst geometry = new BufferGeometry();\n\t\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( data.result, 3, false ) );\n\t\t\t\t\tresolve( geometry );\n\t\t\t\t\tworker.onmessage = null;\n\n\t\t\t\t} else if ( options.onProgress ) {\n\n\t\t\t\t\toptions.onProgress( data.progress );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tconst index = geometry.index ? geometry.index.array.slice() : null;\n\t\t\tconst position = geometry.attributes.position.array.slice();\n\t\t\tconst transfer = [ position.buffer ];\n\t\t\tif ( index ) {\n\n\t\t\t\ttransfer.push( index.buffer );\n\n\t\t\t}\n\n\t\t\tworker.postMessage( {\n\t\t\t\tindex,\n\t\t\t\tposition,\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\tonProgress: null,\n\t\t\t\t\tincludedProgressCallback: Boolean( options.onProgress ),\n\t\t\t\t},\n\t\t\t}, transfer );\n\n\t\t} );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.worker.terminate();\n\t\tthis.worker = null;\n\n\t}\n\n}\n","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8zbCD\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};"],"names":["$c9fdec40e3bbb10a$var$renderer","$c9fdec40e3bbb10a$var$camera","$c9fdec40e3bbb10a$var$scene","$c9fdec40e3bbb10a$var$gui","$c9fdec40e3bbb10a$var$lines","$c9fdec40e3bbb10a$var$model","$c9fdec40e3bbb10a$var$projection","$c9fdec40e3bbb10a$var$group","$c9fdec40e3bbb10a$var$shadedWhiteModel","$c9fdec40e3bbb10a$var$whiteModel","$c9fdec40e3bbb10a$var$outputContainer","$c9fdec40e3bbb10a$var$worker","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","i","length","resolved","JSON","parse","$ilwiq","$jiuw3","$5Rd1x","$7lx9d","$7ePFa","$kp7Te","$4CEV9","$5c260663d40074f0$var$NAME","$deac5b03489e8ef8$exports","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","location","source","stringify","URL","createObjectURL","Blob","type","$deac5b03489e8ef8$var$url","resolve","url","toString","$5c260663d40074f0$export$58847e466a6b9214","constructor","running","worker","Worker","onerror","message","generate","geometry","options","Promise","reject","onmessage","data","error","result","BufferGeometry","setAttribute","BufferAttribute","onProgress","progress","index","array","slice","position","attributes","transfer","buffer","push","postMessage","includedProgressCallback","Boolean","dispose","terminate","$fNPnQ","$c9fdec40e3bbb10a$var$params","displayModel","displayEdges","displayProjection","sortEdges","includeIntersectionEdges","useWorker","rotate","quaternion","random","updateMatrixWorld","box","Box3","setFromObject","getCenter","multiplyScalar","y","Math","max","min","regenerate","$c9fdec40e3bbb10a$var$task","$c9fdec40e3bbb10a$var$updateEdges","runTime","innerText","timeStart","performance","now","geometries","updateWorldMatrix","traverse","c","clone","key","applyMatrix4","matrixWorld","deleteAttribute","mergedGeometry","mergeGeometries","mergeTime","p","parseFloat","toFixed","then","generator","ProjectionGenerator","iterationTime","angleThreshold","task","getLineGeometry","next","done","value","trimTime","$c9fdec40e3bbb10a$var$init","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","body","appendChild","domElement","Scene","light","DirectionalLight","add","ambientLight","AmbientLight","Group","gltf","GLTFLoader","setMeshoptDecoder","MeshoptDecoder","loadAsync","scene","whiteMaterial","MeshStandardMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","material","whiteBasicMaterial","MeshBasicMaterial","edges","generateEdges","undefined","points","flatMap","line","start","end","geom","setFromPoints","geomLines","LineSegments","LineBasicMaterial","color","copy","scale","PerspectiveCamera","setScalar","updateProjectionMatrix","OrbitControls","GUI","$c9fdec40e3bbb10a$var$render","requestAnimationFrame","res","visible","render","addEventListener","aspect"],"version":3,"file":"edgeProjection.59721e0c.js.map"}