{"mappings":"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","sources":["<anon>","example/floorProjection.js","node_modules/three/examples/jsm/controls/MapControls.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire6c98\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire6c98\"] = parcelRequire;\n}\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n// MapControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\nclass $e0db4e8792e33c17$export$7628ccdac312035f extends (0, $5Rd1x.OrbitControls) {\n    constructor(object, domElement){\n        super(object, domElement);\n        this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n        this.mouseButtons = {\n            LEFT: (0, $ilwiq.MOUSE).PAN,\n            MIDDLE: (0, $ilwiq.MOUSE).DOLLY,\n            RIGHT: (0, $ilwiq.MOUSE).ROTATE\n        };\n        this.touches = {\n            ONE: (0, $ilwiq.TOUCH).PAN,\n            TWO: (0, $ilwiq.TOUCH).DOLLY_ROTATE\n        };\n    }\n}\n\n\n\nvar $7lx9d = parcelRequire(\"7lx9d\");\n\nvar $7ePFa = parcelRequire(\"7ePFa\");\n\nvar $kp7Te = parcelRequire(\"kp7Te\");\n\nvar $4CEV9 = parcelRequire(\"4CEV9\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\nconst $63fee0271f901c43$var$ANGLE_THRESHOLD = 50;\nlet $63fee0271f901c43$var$renderer, $63fee0271f901c43$var$camera, $63fee0271f901c43$var$scene, $63fee0271f901c43$var$gui, $63fee0271f901c43$var$controls;\nlet $63fee0271f901c43$var$model, $63fee0271f901c43$var$outlines, $63fee0271f901c43$var$group, $63fee0271f901c43$var$silhouette;\nlet $63fee0271f901c43$var$outputContainer;\nlet $63fee0271f901c43$var$task = null;\nconst $63fee0271f901c43$var$params = {\n    displayModel: false,\n    regenerate: ()=>{\n        $63fee0271f901c43$var$task = $63fee0271f901c43$var$updateProjection();\n    }\n};\n$63fee0271f901c43$var$init();\nasync function $63fee0271f901c43$var$init() {\n    $63fee0271f901c43$var$outputContainer = document.getElementById(\"output\");\n    const bgColor = 0x111111;\n    // renderer setup\n    $63fee0271f901c43$var$renderer = new (0, $ilwiq.WebGLRenderer)({\n        antialias: true\n    });\n    $63fee0271f901c43$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $63fee0271f901c43$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $63fee0271f901c43$var$renderer.setClearColor(bgColor, 1);\n    document.body.appendChild($63fee0271f901c43$var$renderer.domElement);\n    // scene setup\n    $63fee0271f901c43$var$scene = new (0, $ilwiq.Scene)();\n    // lights\n    const light = new (0, $ilwiq.DirectionalLight)(0xffffff, 3.5);\n    light.position.set(1, 2, 3);\n    $63fee0271f901c43$var$scene.add(light);\n    const ambientLight = new (0, $ilwiq.AmbientLight)(0xb0bec5, 0.5);\n    $63fee0271f901c43$var$scene.add(ambientLight);\n    // load model\n    $63fee0271f901c43$var$group = new (0, $ilwiq.Group)();\n    $63fee0271f901c43$var$scene.add($63fee0271f901c43$var$group);\n    const gltf = await new (0, $7lx9d.GLTFLoader)().setMeshoptDecoder((0, $kp7Te.MeshoptDecoder)).loadAsync(\"https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/3d-home-layout/scene.glb\");\n    $63fee0271f901c43$var$model = gltf.scene;\n    $63fee0271f901c43$var$group.updateMatrixWorld(true);\n    // center model\n    const box = new (0, $ilwiq.Box3)();\n    box.setFromObject($63fee0271f901c43$var$model, true);\n    box.getCenter($63fee0271f901c43$var$group.position).multiplyScalar(-1);\n    $63fee0271f901c43$var$group.position.y = Math.max(0, -box.min.y) + 1;\n    $63fee0271f901c43$var$group.add($63fee0271f901c43$var$model);\n    $63fee0271f901c43$var$model.visible = false;\n    // create projection display mesh\n    $63fee0271f901c43$var$silhouette = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BufferGeometry)(), new (0, $ilwiq.MeshBasicMaterial)({\n        color: \"#eee\",\n        polygonOffset: true,\n        polygonOffsetFactor: 3,\n        polygonOffsetUnits: 3,\n        side: (0, $ilwiq.DoubleSide)\n    }));\n    $63fee0271f901c43$var$outlines = new (0, $ilwiq.LineSegments)(new (0, $ilwiq.BufferGeometry)(), new (0, $ilwiq.LineBasicMaterial)({\n        color: 0x030303\n    }));\n    $63fee0271f901c43$var$scene.add($63fee0271f901c43$var$outlines, $63fee0271f901c43$var$silhouette);\n    // camera setup\n    $63fee0271f901c43$var$camera = new (0, $ilwiq.PerspectiveCamera)(75, window.innerWidth / window.innerHeight, 0.01, 50);\n    $63fee0271f901c43$var$camera.position.setScalar(5.5);\n    $63fee0271f901c43$var$camera.updateProjectionMatrix();\n    // controls\n    $63fee0271f901c43$var$controls = new (0, $e0db4e8792e33c17$export$7628ccdac312035f)($63fee0271f901c43$var$camera, $63fee0271f901c43$var$renderer.domElement);\n    $63fee0271f901c43$var$controls.zoomToCursor = true;\n    $63fee0271f901c43$var$controls.maxPolarAngle = Math.PI / 3;\n    $63fee0271f901c43$var$task = $63fee0271f901c43$var$updateProjection();\n    $63fee0271f901c43$var$gui = new (0, $jiuw3.GUI)();\n    $63fee0271f901c43$var$gui.add($63fee0271f901c43$var$params, \"displayModel\");\n    $63fee0271f901c43$var$gui.add($63fee0271f901c43$var$params, \"regenerate\");\n    $63fee0271f901c43$var$render();\n    window.addEventListener(\"resize\", function() {\n        $63fee0271f901c43$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $63fee0271f901c43$var$camera.updateProjectionMatrix();\n        $63fee0271f901c43$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n}\nfunction* $63fee0271f901c43$var$updateProjection() {\n    $63fee0271f901c43$var$outputContainer.innerText = \"processing: --\";\n    $63fee0271f901c43$var$silhouette.visible = false;\n    $63fee0271f901c43$var$outlines.visible = false;\n    // transform and merge geometries to project into a single model\n    const geometries = [];\n    $63fee0271f901c43$var$model.updateWorldMatrix(true, true);\n    $63fee0271f901c43$var$model.traverse((c)=>{\n        if (c.geometry) {\n            const clone = c.geometry.clone();\n            clone.applyMatrix4(c.matrixWorld);\n            for(const key in clone.attributes)if (key !== \"position\") clone.deleteAttribute(key);\n            geometries.push(clone);\n        }\n    });\n    const mergedGeometry = (0, $7ePFa.mergeGeometries)(geometries, false);\n    yield;\n    // generate the silhouette\n    let task, result, generator;\n    generator = new (0, $4CEV9.SilhouetteGenerator)();\n    generator.sortTriangles = true;\n    task = generator.generate(mergedGeometry, {\n        onProgress: (p, data)=>{\n            $63fee0271f901c43$var$outputContainer.innerText = `processing: ${parseFloat((p * 100).toFixed(2))}%`;\n            $63fee0271f901c43$var$silhouette.geometry.dispose();\n            $63fee0271f901c43$var$silhouette.geometry = data.getGeometry();\n            $63fee0271f901c43$var$silhouette.visible = true;\n        }\n    });\n    result = task.next();\n    while(!result.done){\n        result = task.next();\n        yield;\n    }\n    $63fee0271f901c43$var$silhouette.geometry.dispose();\n    $63fee0271f901c43$var$silhouette.geometry = result.value;\n    $63fee0271f901c43$var$silhouette.visible = true;\n    $63fee0271f901c43$var$outputContainer.innerText = \"generating intersection edges...\";\n    // generate the edges\n    generator = new (0, $4CEV9.ProjectionGenerator)();\n    generator.angleThreshold = $63fee0271f901c43$var$ANGLE_THRESHOLD;\n    task = generator.generate(mergedGeometry, {\n        onProgress: (p, data)=>{\n            $63fee0271f901c43$var$outputContainer.innerText = `processing: ${parseFloat((p * 100).toFixed(2))}%`;\n            $63fee0271f901c43$var$outlines.geometry.dispose();\n            $63fee0271f901c43$var$outlines.geometry = data.getLineGeometry();\n            $63fee0271f901c43$var$outlines.visible = true;\n        }\n    });\n    result = task.next();\n    while(!result.done){\n        result = task.next();\n        yield;\n    }\n    $63fee0271f901c43$var$outlines.geometry.dispose();\n    $63fee0271f901c43$var$outlines.geometry = result.value;\n    $63fee0271f901c43$var$outlines.visible = true;\n    $63fee0271f901c43$var$outputContainer.innerText = \"\";\n}\nfunction $63fee0271f901c43$var$render() {\n    requestAnimationFrame($63fee0271f901c43$var$render);\n    if ($63fee0271f901c43$var$task) {\n        const res = $63fee0271f901c43$var$task.next();\n        if (res.done) $63fee0271f901c43$var$task = null;\n    }\n    $63fee0271f901c43$var$model.visible = $63fee0271f901c43$var$params.displayModel;\n    $63fee0271f901c43$var$renderer.render($63fee0271f901c43$var$scene, $63fee0271f901c43$var$camera);\n}\n\n\n//# sourceMappingURL=floorProjection.6ab05ec7.js.map\n","import {\n\tBox3,\n\tWebGLRenderer,\n\tScene,\n\tDirectionalLight,\n\tAmbientLight,\n\tGroup,\n\tBufferGeometry,\n\tLineSegments,\n\tLineBasicMaterial,\n\tPerspectiveCamera,\n\tMeshBasicMaterial,\n\tMesh,\n\tDoubleSide,\n} from 'three';\nimport { MapControls } from 'three/examples/jsm/controls/MapControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { mergeGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { ProjectionGenerator, SilhouetteGenerator } from '../src';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\n\nconst ANGLE_THRESHOLD = 50;\nlet renderer, camera, scene, gui, controls;\nlet model, outlines, group, silhouette;\nlet outputContainer;\nlet task = null;\n\nconst params = {\n\tdisplayModel: false,\n\tregenerate: () => {\n\n\t\ttask = updateProjection();\n\n\t},\n};\n\ninit();\n\nasync function init() {\n\n\toutputContainer = document.getElementById( 'output' );\n\n\tconst bgColor = 0x111111;\n\n\t// renderer setup\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new Scene();\n\n\t// lights\n\tconst light = new DirectionalLight( 0xffffff, 3.5 );\n\tlight.position.set( 1, 2, 3 );\n\tscene.add( light );\n\n\tconst ambientLight = new AmbientLight( 0xb0bec5, 0.5 );\n\tscene.add( ambientLight );\n\n\t// load model\n\tgroup = new Group();\n\tscene.add( group );\n\n\tconst gltf = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/3d-home-layout/scene.glb' );\n\tmodel = gltf.scene;\n\tgroup.updateMatrixWorld( true );\n\n\t// center model\n\tconst box = new Box3();\n\tbox.setFromObject( model, true );\n\tbox.getCenter( group.position ).multiplyScalar( - 1 );\n\tgroup.position.y = Math.max( 0, - box.min.y ) + 1;\n\tgroup.add( model );\n\tmodel.visible = false;\n\n\t// create projection display mesh\n\tsilhouette = new Mesh( new BufferGeometry(), new MeshBasicMaterial( {\n\t\tcolor: '#eee',\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetFactor: 3,\n\t\tpolygonOffsetUnits: 3,\n\t\tside: DoubleSide,\n\t} ) );\n\toutlines = new LineSegments( new BufferGeometry(), new LineBasicMaterial( { color: 0x030303 } ) );\n\tscene.add( outlines, silhouette );\n\n\t// camera setup\n\tcamera = new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.01, 50 );\n\tcamera.position.setScalar( 5.5 );\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new MapControls( camera, renderer.domElement );\n\tcontrols.zoomToCursor = true;\n\tcontrols.maxPolarAngle = Math.PI / 3;\n\n\ttask = updateProjection();\n\n\tgui = new GUI();\n\tgui.add( params, 'displayModel' );\n\tgui.add( params, 'regenerate' );\n\n\trender();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\nfunction* updateProjection() {\n\n\toutputContainer.innerText = 'processing: --';\n\tsilhouette.visible = false;\n\toutlines.visible = false;\n\n\t// transform and merge geometries to project into a single model\n\tconst geometries = [];\n\tmodel.updateWorldMatrix( true, true );\n\tmodel.traverse( c => {\n\n\t\tif ( c.geometry ) {\n\n\t\t\tconst clone = c.geometry.clone();\n\t\t\tclone.applyMatrix4( c.matrixWorld );\n\t\t\tfor ( const key in clone.attributes ) {\n\n\t\t\t\tif ( key !== 'position' ) {\n\n\t\t\t\t\tclone.deleteAttribute( key );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometries.push( clone );\n\n\t\t}\n\n\t} );\n\tconst mergedGeometry = mergeGeometries( geometries, false );\n\n\tyield;\n\n\t// generate the silhouette\n\tlet task, result, generator;\n\tgenerator = new SilhouetteGenerator();\n\tgenerator.sortTriangles = true;\n\ttask = generator.generate( mergedGeometry, {\n\n\t\tonProgress: ( p, data ) => {\n\n\t\t\toutputContainer.innerText = `processing: ${ parseFloat( ( p * 100 ).toFixed( 2 ) ) }%`;\n\t\t\tsilhouette.geometry.dispose();\n\t\t\tsilhouette.geometry = data.getGeometry();\n\t\t\tsilhouette.visible = true;\n\n\t\t},\n\n\t} );\n\n\tresult = task.next();\n\twhile ( ! result.done ) {\n\n\t\tresult = task.next();\n\t\tyield;\n\n\t}\n\n\tsilhouette.geometry.dispose();\n\tsilhouette.geometry = result.value;\n\tsilhouette.visible = true;\n\toutputContainer.innerText = 'generating intersection edges...';\n\n\t// generate the edges\n\tgenerator = new ProjectionGenerator();\n\tgenerator.angleThreshold = ANGLE_THRESHOLD;\n\ttask = generator.generate( mergedGeometry, {\n\n\t\tonProgress: ( p, data ) => {\n\n\t\t\toutputContainer.innerText = `processing: ${ parseFloat( ( p * 100 ).toFixed( 2 ) ) }%`;\n\t\t\toutlines.geometry.dispose();\n\t\t\toutlines.geometry = data.getLineGeometry();\n\t\t\toutlines.visible = true;\n\n\t\t},\n\n\t} );\n\n\tresult = task.next();\n\twhile ( ! result.done ) {\n\n\t\tresult = task.next();\n\t\tyield;\n\n\t}\n\n\toutlines.geometry.dispose();\n\toutlines.geometry = result.value;\n\toutlines.visible = true;\n\toutputContainer.innerText = '';\n\n}\n\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tif ( task ) {\n\n\t\tconst res = task.next();\n\t\tif ( res.done ) {\n\n\t\t\ttask = null;\n\n\t\t}\n\n\t}\n\n\tmodel.visible = params.displayModel;\n\trenderer.render( scene, camera );\n\n}\n","import { MOUSE, TOUCH } from 'three';\n\nimport { OrbitControls } from './OrbitControls.js';\n\n// MapControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\t\tthis.mouseButtons = { LEFT: MOUSE.PAN, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.ROTATE };\n\n\t\tthis.touches = { ONE: TOUCH.PAN, TWO: TOUCH.DOLLY_ROTATE };\n\n\t}\n\n}\n\nexport { MapControls };\n"],"names":["$63fee0271f901c43$var$renderer","$63fee0271f901c43$var$camera","$63fee0271f901c43$var$scene","$63fee0271f901c43$var$gui","$63fee0271f901c43$var$controls","$63fee0271f901c43$var$model","$63fee0271f901c43$var$outlines","$63fee0271f901c43$var$group","$63fee0271f901c43$var$silhouette","$63fee0271f901c43$var$outputContainer","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$ilwiq","$5Rd1x","$e0db4e8792e33c17$export$7628ccdac312035f","OrbitControls","constructor","object","domElement","screenSpacePanning","mouseButtons","LEFT","MOUSE","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","touches","ONE","TOUCH","TWO","DOLLY_ROTATE","$7lx9d","$7ePFa","$kp7Te","$4CEV9","$jiuw3","$63fee0271f901c43$var$task","$63fee0271f901c43$var$params","displayModel","regenerate","$63fee0271f901c43$var$updateProjection","task","result","generator","innerText","visible","geometries","updateWorldMatrix","traverse","c","geometry","clone","key","applyMatrix4","matrixWorld","attributes","deleteAttribute","push","mergedGeometry","mergeGeometries","SilhouetteGenerator","sortTriangles","generate","onProgress","p","data","parseFloat","toFixed","dispose","getGeometry","next","done","value","ProjectionGenerator","angleThreshold","getLineGeometry","$63fee0271f901c43$var$init","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","body","appendChild","Scene","light","DirectionalLight","position","set","add","ambientLight","AmbientLight","Group","gltf","GLTFLoader","setMeshoptDecoder","MeshoptDecoder","loadAsync","scene","updateMatrixWorld","box","Box3","setFromObject","getCenter","multiplyScalar","y","Math","max","min","Mesh","BufferGeometry","MeshBasicMaterial","color","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","DoubleSide","LineSegments","LineBasicMaterial","PerspectiveCamera","setScalar","updateProjectionMatrix","zoomToCursor","maxPolarAngle","PI","GUI","$63fee0271f901c43$var$render","requestAnimationFrame","res","render","addEventListener","aspect"],"version":3,"file":"floorProjection.6ab05ec7.js.map"}